{
	"info": {
		"_postman_id": "2a04f760-6a3b-46e8-a2a2-503279e86f4b",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23061344",
		"_collection_link": "https://planetary-sunset-25656.postman.co/workspace/EvgenQA~107ef7ef-e111-48e1-8101-9c459dc62be9/collection/23061344-2a04f760-6a3b-46e8-a2a2-503279e86f4b?action=share&source=collection_link&creator=23061344"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка что в body приходит правильный string",
							"pm.test(\"Response body contains the expected string\", function () {",
							"    pm.expect(pm.response.text()).to.include('This is the first responce from server!ss');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// спарсить response body в json (это вторая строка из функции)",
							"var jsondata = pm.response.json();",
							"",
							"//объявляем переменную, для вытягивания данных из запроса",
							"let reqData = request.data;",
							"",
							"",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)(( + переводит в number )))",
							"pm.test(\"Test age\", function () {    ",
							"    pm.expect(+jsondata.age).to.eql(37);",
							"});",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Test name\", function () {",
							"    pm.expect(jsondata.name).to.eql('Evgen');",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Test salary\", function () {",
							"    pm.expect(jsondata.salary).to.eql(3000);",
							"});",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(jsondata.name).to.eql(reqData.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(jsondata.age).to.eql(reqData.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)((+ переводит в number))",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(jsondata.salary).to.eql(+reqData.salary);",
							"});",
							"// Вывести в консоль параметр family из response.",
							"console.log(\"Print family : \", jsondata.family);",
							" ",
							" var req_salary = reqData.salary;",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Check salary*4\", function () {",
							"    pm.expect(jsondata.family.u_salary_1_5_year).to.eql(req_salary*4);",
							"});",
							"",
							"console.log(\"Check salary*4 : \", jsondata.family.u_salary_1_5_year);",
							" ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Evgen",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// спарсить response body в json (это вторая строка из функции)",
							"var jsondata = pm.response.json();",
							"",
							"//объявляем переменную, чтобы парсить данные из запроса",
							"let reqData = request.data;",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.) ?????????????????????",
							"pm.test(\"Response body has name property with value 'Evgen'\", function () {",
							"     pm.expect(pm.response.json().name).to.eql('Evgen');",
							"// pm.test(\"Check name\", function () {",
							"//     pm.expect(jsondata.name).to.eql(reqData.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(jsondata.age).to.eql(reqData.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)((+ переводит в number))",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(jsondata.salary).to.eql(+reqData.salary);",
							"});",
							"// Вывести в консоль параметр family из response.",
							"console.log(\"Print family : \", jsondata.family);",
							"",
							"//Проверить, что у параметра dog есть параметры name. ",
							"pm.test(\"Dog has name\", function () {",
							"    pm.expect(JSON.stringify(jsondata)).to.include('name');",
							"});",
							"//Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has age\", function () {",
							"    pm.expect(JSON.stringify(jsondata)).to.include('age');",
							"});",
							"//Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name equal Luky\", function () {",
							"    pm.expect(JSON.stringify(jsondata)).to.include('Luky');",
							"});",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check 4\", function () {",
							"    pm.expect(jsondata.family.pets.dog.age).to.eql(4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name ",
							"value": "Evgen",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Evgen&age=37&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// спарсить response body в json\r",
							"var jsondata = pm.response.json();\r",
							"\r",
							"//объявляем переменную, чтобы парсить данные из запроса\r",
							"let reqData = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)??????????????????????\r",
							"pm.test(\"Response body has name property with value 'Evgen'\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql('Evgen');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsondata.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"Print salary from request : \", reqData.salary);\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(\"Print salary from response : \", jsondata.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Print salary from response : \", jsondata.salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Print salary from response : \", jsondata.salary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Print salary from response : \", jsondata.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0 elem\", function () {\r",
							"    pm.expect(+jsondata.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 elem\", function () {\r",
							"    pm.expect(+jsondata.salary[1]).to.eql(reqData.salary*2);\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2 elem\", function () {\r",
							"    pm.expect(+jsondata.salary[2]).to.eql(+reqData.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", jsondata.name);\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", jsondata.age);\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", jsondata.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (var i = 0; i <= 2; i++ ) {\r",
							"    console.log(jsondata.salary[i])\r",
							"    }\r",
							"\t\t\t\t\t\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Evgen&age=37&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//объявляем переменную, чтобы парсить данные из запроса",
							"let reqData = request.data;",
							"//Вставить параметр salary из окружения в request",
							"pm.environment.set(\"salary\", reqData.salary);",
							"//Вставить параметр age из окружения в age",
							"pm.environment.set(\"age\", reqData.age);",
							"//Вставить параметр name из окружения в name",
							"pm.environment.set(\"name\", reqData.name);",
							"//Отправить запрос.",
							"",
							"",
							"",
							"//Спарсить response body в json.",
							"var jsondata = pm.response.json();",
							"",
							"",
							"var respPersonuname = jsondata.u_name;",
							"// Спарсить request.",
							"// let reqData = request.data;",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"json response have start_qa_salary\", function () {",
							"    pm.expect(jsondata).to.have.property(\"start_qa_salary\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"json response have qa_salary_after_6_months\", function () {",
							"    pm.expect(jsondata).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"json response have qa_salary_after_12_months\", function () {",
							"    pm.expect(jsondata).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"json response have qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsondata).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"json response have qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsondata).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"json response have elem  person\", function () {",
							"    pm.expect(jsondata).to.have.property(\"person\");",
							"});",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check start_qa_salary elem\", function () {",
							"    pm.expect(jsondata.start_qa_salary).to.eql(+reqData.salary);",
							"});",
							"console.log(\"start_qa_salary - \",jsondata.start_qa_salary);",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_6_months elem\", function () {",
							"    pm.expect(jsondata.qa_salary_after_6_months).to.eql(+reqData.salary * 2);",
							"});",
							"console.log(\"qa_salary_after_6_months - \",jsondata.qa_salary_after_6_months);",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_12_months elem\", function () {",
							"    pm.expect(jsondata.qa_salary_after_12_months).to.eql(+reqData.salary * 2.7);",
							"});",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_1.5_years elem\", function () {",
							"    var req_salary_1 = reqData.salary",
							"    pm.expect(pm.response.json()[\"qa_salary_after_1.5_year\"]).to.eql(+req_salary_1 * 3.3)",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_3.5_years elem\", function () {",
							"    var req_salary_1 = reqData.salary",
							"    pm.expect(pm.response.json()[\"qa_salary_after_3.5_years\"]).to.eql(+req_salary_1 * 3.8);",
							"});",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check 1 elem from u_name\", function () {",
							"    pm.expect(+jsondata.person.u_name[1]).to.eql(+reqData.salary);",
							"});",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check u_age elem from age\", function () {",
							"    pm.expect(+jsondata.person.u_age).to.eql(+reqData.age);",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Check u_salary_5_years elem\", function () {",
							"    var req_salary_2 = reqData.salary;",
							"    // pm.expect(pm.response.json().person.u_salary_5_years).to.eql(+req_salary_2 * 4.2);",
							"    pm.expect(+jsondata.person.u_salary_5_years).to.eql(+req_salary_2 * 4.2)",
							"});",
							"console.log(\" u_salary_5_years - \",jsondata.person.u_salary_5_years);",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"var elem_in_line = [jsondata.person]",
							"",
							"for (let i = 0; i < elem_in_line.length; i++) {",
							"//   Этот код выполняется для каждого элемента",
							"  console.log('the cycle of person  ==> ', elem_in_line[i]);",
							"}",
							"",
							"",
							"  ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Evgen",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// проверка на статус 200",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});  "
				]
			}
		}
	]
}